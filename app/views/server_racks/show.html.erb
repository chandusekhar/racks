<div class='ui-dialog ui-widget ui-widget-content ui-corner-all' style='width:98%; '>
	<div class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix">
		<span class='ui-dialog-title'><%= "#{@server_rack.name} in #{@server_rack.datacenter.name} (#{@server_rack.datacenter.location})" %></span>
	</div>
	<div id="server_rack_info" class='tabs'>
		<ul>
			<li><a href='#rack_info'>Rack info</a></li>
			<li><a href='#devices_list'>Devices</a></li>
			<li><a href='#connections'>Connections</a></li>
		</ul>
		<div id='rack_info'>
			<p><%= @server_rack.comment %></p>
			<p>Available units: <%= "#{@server_rack.units.available.count}/#{@server_rack.units.count}" %></p>
			
			<%= link_to 'Edit', edit_datacenter_server_rack_path(@server_rack.datacenter, @server_rack), :remote => true %> |
			<%= link_to 'Back', datacenters_path %>
		</div>

		<div id='devices_list'>
			<p>
				<%= link_to 'Add device', [:new, @server_rack.datacenter, @server_rack, :device], :class => 'remote button' %>
			</p>
			<div class='devices_accordion'>
				<%= render :partial => 'devices/device', :collection => @server_rack.devices, :as => :device %>
			</div>

		</div>
		<div id='connections'>
			<script type="text/javascript">
			var interfaceIds = [];
			var interfaceLocations = [];
			var deviceYs = [];
			var deviceIds = [];
			var deviceConnections = [];
			var drawingCanvas;
			var context;
			window.onload = function() {
				drawingCanvas = document.getElementById('myDrawing');
				if(drawingCanvas && drawingCanvas.getContext) {
					context = drawingCanvas.getContext('2d');
					
					drawingCanvas.addEventListener('mousedown', ev_canvas, false);
					drawDevices();
					
					drawAllConnections();
					context.save();
				}
			}

			function drawAllConnections(){
				var controlX = 350;
				<% @server_rack.cable_connections.each do |cable_connection| %>
					//draw the connection
					var leftY = interfaceLocations[interfaceIds.indexOf(<%= cable_connection.left_interface_id %>)];
					var rightY = interfaceLocations[interfaceIds.indexOf(<%= cable_connection.right_interface_id %>)];
					var color = "<%= cable_connection.color %>"
					drawConnection(leftY, rightY, controlX, color);
					controlX += 20;
				<% end %>
			}
			function drawConnection(left, right, controlX , color){
				context.strokeStyle = color;
				context.lineWidth = 2;
				context.beginPath();
				context.moveTo(310, left);
				context.bezierCurveTo(controlX, left, controlX, right , 310, right);
				context.stroke();
			};

			function drawDevices(){
				deviceYs = [];
				deviceIds = [];
				deviceConnections = [];
				var yDevice = 10
				<% @server_rack.devices.each do |device| %>
					//draw the device device
					var deviceHeight = 50 + <%= device.interfaces.count %> * 11
					context.fillStyle = "rgb(50,120,176)";
					context.fillRect (10, yDevice, 300, deviceHeight);
					context.font = "12px Helvetica";  
					context.fillStyle = "White";  
					context.fillText('<%= "#{device.units.first.number} - #{device.units.last.number}:" %>', 15, yDevice + 15 );
					context.fillText('<%= "#{device.device_type(:name)}: #{device.name}" %>', 15, yDevice + 30 );
					var yInterface = yDevice +10;
					var xInterface = 310;
					<% device.interfaces.each do |interface| %>
					//draw the interfaces
						context.fillStyle = "rgba(00,0,000, 1)";
						context.beginPath();
						context.arc(xInterface,yInterface,5,2.5, Math.PI, true) 
						context.closePath();
						context.fill();
						context.font = "10px Helvetica"; 
						context.fillText('<%= "#{interface.interface_type(:name)} - #{interface.name}" %>', xInterface - 100, yInterface +2);
						interfaceLocations.push(yInterface);
						interfaceIds.push(<%= interface.id %>);
						yInterface +=12;
					<% end %>
					deviceIds.push([<%= device.id %>, ]);
					<% device.cable_connections.each do |cable_connection| %>
						deviceConnections.push([<%= device.id %>, [<%= cable_connection.left_interface_id %>, <%= cable_connection.right_interface_id %>, "<%= cable_connection.color %>"]])
					<% end %>
					deviceYs.push([yDevice, yDevice + deviceHeight])
					yDevice = yDevice + deviceHeight + 5;
				<% end %>

			}


			function ev_canvas(evt){
				var clickY = evt.pageY - drawingCanvas.offsetTop - 80;
				var clickX = evt.pageX - drawingCanvas.offsetLeft;
				context.clearRect(0,0, drawingCanvas.width, drawingCanvas.height);
				drawDevices();
				if (clickX < 310) {
					for (var num = deviceYs.length - 1; num >= 0; num--){
						if (clickY > deviceYs[num][0] && clickY < deviceYs[num][1] ) {
							//context.clearRect(10, deviceYs[num][0], 300, deviceYs[num][1])
							context.strokeStyle = "rgb(129,181,62)";
							context.lineWidth = 5;
							context.strokeRect(12, deviceYs[num][0]+2, 296, deviceYs[num][1]-4-deviceYs[num][0]);
							var controlX = 350
							for (var i = deviceConnections.length - 1; i >= 0; i--){
								if (deviceConnections[i][0] == deviceIds[num]) {
									var leftY = interfaceLocations[interfaceIds.indexOf(deviceConnections[i][1][0])];
									var rightY = interfaceLocations[interfaceIds.indexOf(deviceConnections[i][1][1])];
									var color = deviceConnections[i][1][2]
									drawConnection(leftY, rightY, controlX, color);
									controlX += 20;
								};
								
							};
							
						};
					};
				}else{
					drawAllConnections();
				}

			};

			</script>

			<canvas id="myDrawing" width='1000' height='<%= @server_rack.devices.count * 50 + @server_rack.interfaces.count * 15 %>' style='float:left;'>
				<p>Your browser doesn't support canvas.</p>
			</canvas>
			<div style="clear: both;">&nbsp;</div>
		</div>
	</div>
</div>